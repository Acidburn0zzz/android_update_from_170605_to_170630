From 722de8526a9770f1f33627af7bf9b8fc1cc18d92 Mon Sep 17 00:00:00 2001
From: "rimon.xu" <rimon.xu@rock-chips.com>
Date: Fri, 16 Jun 2017 17:32:38 +0800
Subject: [PATCH 3/8] [enc]: add encoder recoder.        1.setprop
 record_omx_enc_in 1 : record enc input file.       
 2.setprop record_omx_enc_out 1 : record enc output
 file.

Change-Id: I3c1348d6bf4bf521c5d810767ce597ddc9d8b33f
Signed-off-by: rimon.xu <rimon.xu@rock-chips.com>
Signed-off-by: tug <tug@skyth-tek.com>
---
 component/video/dec/Rkvpu_OMX_Vdec.c |    2 +-
 component/video/enc/Rkvpu_OMX_Venc.c |   78 ++++++++++++++++++++++++----------
 component/video/enc/Rkvpu_OMX_Venc.h |    8 ++--
 include/rockchip/git_info.h          |    2 +-
 osal/Rockchip_OSAL_RGA_Process.c     |    1 +
 5 files changed, 63 insertions(+), 28 deletions(-)

diff --git a/component/video/dec/Rkvpu_OMX_Vdec.c b/component/video/dec/Rkvpu_OMX_Vdec.c
index 146ba2b..c0e7cb4 100755
--- a/component/video/dec/Rkvpu_OMX_Vdec.c
+++ b/component/video/dec/Rkvpu_OMX_Vdec.c
@@ -206,7 +206,7 @@ OMX_ERRORTYPE Rkvpu_OMX_CheckIsNeedFastmode(
         pVideoDec->bFastMode = OMX_TRUE;
         int fast_mode = 1;
         p_vpu_ctx->control(p_vpu_ctx, VPU_API_USE_FAST_MODE, &fast_mode);
-        omx_trace("used fast mode, h265decoder, width = %d, height = %d",
+        omx_info("used fast mode, h265decoder, width = %d, height = %d",
                                               pInputPort->portDefinition.format.video.nFrameWidth,
                                               pInputPort->portDefinition.format.video.nFrameHeight);
     }
diff --git a/component/video/enc/Rkvpu_OMX_Venc.c b/component/video/enc/Rkvpu_OMX_Venc.c
index 02a4925..7c593ca 100755
--- a/component/video/enc/Rkvpu_OMX_Venc.c
+++ b/component/video/enc/Rkvpu_OMX_Venc.c
@@ -46,6 +46,8 @@
 #include "hardware/rga.h"
 #include "vpu_type.h"
 #include "gralloc_priv_omx.h"
+#include <cutils/properties.h>
+
 
 #ifdef USE_ANB
 #include "Rockchip_OSAL_Android.h"
@@ -481,11 +483,11 @@ OMX_ERRORTYPE Rkvpu_ProcessStoreMetaData(OMX_COMPONENTTYPE *pOMXComponent, OMX_B
             VPUMemClean(pVideoEnc->enc_vpumem);
             *aPhy_address = pVideoEnc->enc_vpumem->phy_addr;
             *len = Width * Height * 3 / 2;
-#ifdef WRITE_FILE
-            VPUMemInvalidate(pVideoEnc->enc_vpumem);
-            fwrite(pVideoEnc->enc_vpumem->vir_addr, 1, Width * Height * 3 / 2, pVideoEnc->fp_h264);
-            fflush(pVideoEnc->fp_h264);
-#endif
+            if (pVideoEnc->fp_enc_in) {
+                VPUMemInvalidate(pVideoEnc->enc_vpumem);
+                fwrite(pVideoEnc->enc_vpumem->vir_addr, 1, Width * Height * 3 / 2, pVideoEnc->fp_enc_in);
+                fflush(pVideoEnc->fp_enc_in);
+            }
         } else if (pVideoEnc->bPixel_format == HAL_PIXEL_FORMAT_YCrCb_NV12) {
             *len = Rkvpu_N12_Process(pOMXComponent, &vplanes, aPhy_address);
         } else if (pVideoEnc->bPixel_format == HAL_PIXEL_FORMAT_YCbCr_420_888) {
@@ -498,10 +500,10 @@ OMX_ERRORTYPE Rkvpu_ProcessStoreMetaData(OMX_COMPONENTTYPE *pOMXComponent, OMX_B
             if (Width != vplanes.stride) {
                 rga_nv12_copy(&vplanes, pVideoEnc->enc_vpumem, Width, Height, pVideoEnc->rga_ctx);
                 *aPhy_address = pVideoEnc->enc_vpumem->phy_addr;
-#ifdef WRITE_FILE
-                fwrite(pVideoEnc->enc_vpumem->vir_addr, 1, Width * Height * 3 / 2, pVideoEnc->fp_rgb);
-                fflush(pVideoEnc->fp_rgb);
-#endif
+                if (pVideoEnc->fp_enc_in) {
+                    fwrite(pVideoEnc->enc_vpumem->vir_addr, 1, Width * Height * 3 / 2, pVideoEnc->fp_enc_in);
+                    fflush(pVideoEnc->fp_enc_in);
+                }
             } else {
                 Rockchip_OSAL_SharedMemory_getPhyAddress(pVideoEnc->hSharedMemory, vplanes.fd, aPhy_address);
             }
@@ -692,10 +694,11 @@ OMX_BOOL Rkvpu_Post_OutputStream(OMX_COMPONENTTYPE *pOMXComponent)
                 omx_info("set bSpsPpsLen %d", pVideoEnc->bSpsPpsLen);
                 pVideoEnc->bSpsPpsHeaderFlag = OMX_TRUE;
                 ret = OMX_TRUE;
-#if 0 //def WRITE_FILE
-                fwrite(aOut_buf, 1, pVideoEnc->bSpsPpsLen, pVideoEnc->fp_h264);
-                fflush(pVideoEnc->fp_h264);
-#endif
+                if (pVideoEnc->fp_enc_out != NULL) {
+                    fwrite(aOut_buf, 1, pVideoEnc->bSpsPpsLen, pVideoEnc->fp_enc_out);
+                    fflush(pVideoEnc->fp_enc_out);
+                }
+
                 Rkvpu_OutputBufferReturn(pOMXComponent, outputUseBuffer);
                 goto EXIT;
             }
@@ -747,15 +750,15 @@ OMX_BOOL Rkvpu_Post_OutputStream(OMX_COMPONENTTYPE *pOMXComponent)
                     outputUseBuffer->usedDataLen += 4;
                     outputUseBuffer->usedDataLen += pOutput.size;
                 }
-#if 0 //def WRITE_FILE
-                fwrite(aOut_buf, 1, outputUseBuffer->remainDataLen , pVideoEnc->fp_h264);
-                fflush(pVideoEnc->fp_h264);
-#endif
             } else {
                 Rockchip_OSAL_Memcpy(aOut_buf, pOutput.data, pOutput.size);
                 outputUseBuffer->remainDataLen = pOutput.size;
                 outputUseBuffer->usedDataLen = pOutput.size;
             }
+            if (pVideoEnc->fp_enc_out != NULL) {
+                fwrite(aOut_buf, 1, outputUseBuffer->remainDataLen , pVideoEnc->fp_enc_out);
+                fflush(pVideoEnc->fp_enc_out);
+            }
 
             outputUseBuffer->timeStamp = pOutput.timeUs;
             if (pOutput.keyFrame) {
@@ -1173,6 +1176,34 @@ OMX_ERRORTYPE omx_open_vpuenc_context(RKVPU_OMX_VIDEOENC_COMPONENT *pVideoEnc)
     return OMX_ErrorNone;
 }
 
+OMX_ERRORTYPE Rkvpu_Enc_DebugSwitchfromPropget(
+    ROCKCHIP_OMX_BASECOMPONENT *pRockchipComponent)
+{
+    OMX_ERRORTYPE                  ret               = OMX_ErrorNone;
+    RKVPU_OMX_VIDEOENC_COMPONENT  *pVideoEnc         = (RKVPU_OMX_VIDEOENC_COMPONENT *)pRockchipComponent->hComponentHandle;
+    char                           value[PROPERTY_VALUE_MAX];
+    memset(value, 0, sizeof(value));
+    if (property_get("record_omx_enc_out", value, "0") && (atoi(value) > 0)) {
+        omx_info("Start recording stream to /data/video/enc_out.bin");
+        if (pVideoEnc->fp_enc_out != NULL) {
+            fclose(pVideoEnc->fp_enc_out);
+        }
+        pVideoEnc->fp_enc_out = fopen("data/video/enc_out.bin", "wb");
+    }
+
+    memset(value, 0, sizeof(value));
+    if (property_get("record_omx_enc_in", value, "0") && (atoi(value) > 0)) {
+        omx_info("Start recording stream to /data/video/enc_in.bin");
+        if (pVideoEnc->fp_enc_in != NULL) {
+            fclose(pVideoEnc->fp_enc_in);
+        }
+        pVideoEnc->fp_enc_in = fopen("data/video/enc_in.bin", "wb");
+    }
+
+    return ret;
+}
+
+
 OMX_ERRORTYPE Rkvpu_Enc_ComponentInit(OMX_COMPONENTTYPE *pOMXComponent)
 {
     OMX_ERRORTYPE                  ret               = OMX_ErrorNone;
@@ -1183,12 +1214,14 @@ OMX_ERRORTYPE Rkvpu_Enc_ComponentInit(OMX_COMPONENTTYPE *pOMXComponent)
     ROCKCHIP_OMX_BASEPORT           *pRockchipOutPort  = &pRockchipComponent->pRockchipPort[OUTPUT_PORT_INDEX];
     VpuCodecContext_t               *p_vpu_ctx           = NULL;
     EncParameter_t *EncParam = NULL;
-    omx_info("xlmxlmxlm %d",1);
     RK_U32 new_width = 0, new_height = 0;
     if (omx_open_vpuenc_context(pVideoEnc) != OMX_ErrorNone) {
         ret = OMX_ErrorInsufficientResources;
         goto EXIT;
     }
+    if (pRockchipComponent->rkversion != NULL) {
+        omx_err("omx decoder info : %s",pRockchipComponent->rkversion);
+    }
     if (pVideoEnc->bIsNewVpu == OMX_TRUE) {
         p_vpu_ctx = (VpuCodecContext_t *)Rockchip_OSAL_Malloc(sizeof(VpuCodecContext_t));
     }
@@ -1318,10 +1351,8 @@ OMX_ERRORTYPE Rkvpu_Enc_ComponentInit(OMX_COMPONENTTYPE *pOMXComponent)
 
     pVideoEnc->bRgb2yuvFlag = OMX_FALSE;
     pVideoEnc->bPixel_format = -1;
-#ifdef WRITE_FILE
-    pVideoEnc->fp_rgb = fopen("data/enc_in.rgb", "wb");
-    pVideoEnc->fp_h264 = fopen("data/enc_out.h264", "wb");
-#endif
+
+    Rkvpu_Enc_DebugSwitchfromPropget(pRockchipComponent);
 
     pVideoEnc->vpu_ctx = p_vpu_ctx;
 
@@ -1718,6 +1749,9 @@ OMX_ERRORTYPE Rockchip_OMX_ComponentDeInit(OMX_HANDLETYPE hComponent)
     pRockchipComponent = (ROCKCHIP_OMX_BASECOMPONENT *)pOMXComponent->pComponentPrivate;
 
     pVideoEnc = (RKVPU_OMX_VIDEOENC_COMPONENT *)pRockchipComponent->hComponentHandle;
+    if (pVideoEnc->fp_enc_out != NULL) {
+        fclose(pVideoEnc->fp_enc_out);
+    }
     Rockchip_OSAL_MutexTerminate(pVideoEnc->bScale_Mutex);
     Rockchip_OSAL_MutexTerminate(pVideoEnc->bRecofig_Mutex);
     if (pVideoEnc->hSharedMemory != NULL) {
diff --git a/component/video/enc/Rkvpu_OMX_Venc.h b/component/video/enc/Rkvpu_OMX_Venc.h
index 426073a..258ef7a 100755
--- a/component/video/enc/Rkvpu_OMX_Venc.h
+++ b/component/video/enc/Rkvpu_OMX_Venc.h
@@ -115,10 +115,10 @@ typedef struct _RKVPU_OMX_VIDEOENC_COMPONENT {
     OMX_BOOL bRgb2yuvFlag;
 
     void *rkapi_hdl;
-#ifdef WRITE_FILE
-    FILE *fp_rgb;
-    FILE *fp_h264;
-#endif
+    //for debug
+    FILE *fp_enc_out;
+    FILE *fp_enc_in;
+
     //add by xlm for use mpp or vpuapi
     OMX_BOOL bIsUseMpp;
     OMX_BOOL bIsNewVpu;
diff --git a/include/rockchip/git_info.h b/include/rockchip/git_info.h
index 5d26fad..a3c645e 100644
--- a/include/rockchip/git_info.h
+++ b/include/rockchip/git_info.h
@@ -1 +1 @@
-#define OMX_COMPILE_INFO      "author:  xlm\n time: Fri, 16 Jun 2017 15:11:03 +0800 git commit 6e97cce3298daaf9bea1763c84abe80e2f282928 "
+#define OMX_COMPILE_INFO      "author:  xlm\n time: Fri, 16 Jun 2017 17:28:12 +0800 git commit 482d7c6ae7e6727f88866cddcb8f9de0860e475a "
diff --git a/osal/Rockchip_OSAL_RGA_Process.c b/osal/Rockchip_OSAL_RGA_Process.c
index 243cea2..d47636e 100755
--- a/osal/Rockchip_OSAL_RGA_Process.c
+++ b/osal/Rockchip_OSAL_RGA_Process.c
@@ -509,6 +509,7 @@ void rga_nv12_copy(RockchipVideoPlane *plane, VPUMemLinear_t *vpumem, uint32_t W
 
 #endif
 }
+
 void rga_rgb_copy(RockchipVideoPlane *plane, VPUMemLinear_t *vpumem, uint32_t Width, uint32_t Height, void* rga_ctx)
 {
 #ifndef USE_DRM
-- 
1.7.9.5

